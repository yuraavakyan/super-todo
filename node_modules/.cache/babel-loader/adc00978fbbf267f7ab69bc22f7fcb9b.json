{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/yuri/bitschool/TodoProject/super-todo/src/components/mainPage/Demo.js\";\nimport React, { Component } from \"react\";\nimport Tasks from \"../tasks/Tasks\";\nimport check from \"../../images/check.png\";\nimport Navbar from \"../navbar/Navbar\";\nimport idGenerator from \"react-id-generator\";\nimport Modal from \"../modal/Modal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass ToDo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [],\n      inputValue: \"\",\n      toggle: false\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        inputValue: event.target.value\n      });\n    };\n\n    this.handleReset = event => {};\n\n    this.handleAddTask = () => {\n      if (!this.state.inputValue == \"\") {\n        const {\n          inputValue\n        } = this.state;\n        const tasks = [...this.state.tasks];\n        const newTask = {\n          id: idGenerator(\"task\"),\n          value: inputValue\n        };\n        tasks.push(newTask);\n        this.setState({\n          tasks: tasks,\n          inputValue: \"\"\n        });\n      }\n    };\n\n    this.handleDelete = event => {\n      const {\n        tasks\n      } = this.state;\n      const id = event.target.parentNode.parentNode.id;\n      const index = tasks.findIndex(element => element.id == id);\n      tasks.splice(index, 1);\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.toggleConfirm = () => {};\n\n    this.handleReset = event => {\n      this.setState({\n        tasks: []\n      });\n    };\n  }\n\n  render() {\n    const {\n      inputValue,\n      tasks\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputPart\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Anything ToDo?\",\n            onChange: this.handleChange,\n            value: this.state.inputValue,\n            className: \"inp\",\n            onKeyPress: event => {\n              if (event.key == \"Enter\") {\n                this.handleAddTask();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleAddTask,\n            className: \"button\",\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"resultPart\",\n          value: this.state.tasks,\n          children: tasks.map((task, index) => {\n            return /*#__PURE__*/_jsxDEV(Tasks, {\n              data: task,\n              handleDelete: this.handleDelete\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset\",\n        onClick: this.handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        onSubmit: () => {\n          console.log(\"submit\");\n        },\n        onClose: () => {\n          console.log(\"close\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ToDo;","map":{"version":3,"sources":["/home/yuri/bitschool/TodoProject/super-todo/src/components/mainPage/Demo.js"],"names":["React","Component","Tasks","check","Navbar","idGenerator","Modal","ToDo","state","tasks","inputValue","toggle","handleChange","event","setState","target","value","handleReset","handleAddTask","newTask","id","push","handleDelete","parentNode","index","findIndex","element","splice","toggleConfirm","render","key","map","task","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,sCAAP;;AAEA,MAAMC,IAAN,SAAmBN,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BO,KAD2B,GACnB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,UAAU,EAAE,EAFN;AAGNC,MAAAA,MAAM,EAAE;AAHF,KADmB;;AAAA,SAO3BC,YAP2B,GAOXC,KAAD,IAAW;AACxB,WAAKC,QAAL,CAAc;AACZJ,QAAAA,UAAU,EAAEG,KAAK,CAACE,MAAN,CAAaC;AADb,OAAd;AAGD,KAX0B;;AAAA,SAa3BC,WAb2B,GAaZJ,KAAD,IAAW,CAAE,CAbA;;AAAA,SAe3BK,aAf2B,GAeX,MAAM;AACpB,UAAI,CAAC,KAAKV,KAAL,CAAWE,UAAZ,IAA0B,EAA9B,EAAkC;AAChC,cAAM;AAAEA,UAAAA;AAAF,YAAiB,KAAKF,KAA5B;AACA,cAAMC,KAAK,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,CAAd;AACA,cAAMU,OAAO,GAAG;AACdC,UAAAA,EAAE,EAAEf,WAAW,CAAC,MAAD,CADD;AAEdW,UAAAA,KAAK,EAAEN;AAFO,SAAhB;AAKAD,QAAAA,KAAK,CAACY,IAAN,CAAWF,OAAX;AACA,aAAKL,QAAL,CAAc;AACZL,UAAAA,KAAK,EAAEA,KADK;AAEZC,UAAAA,UAAU,EAAE;AAFA,SAAd;AAID;AACF,KA9B0B;;AAAA,SAgC3BY,YAhC2B,GAgCXT,KAAD,IAAW;AACxB,YAAM;AAAEJ,QAAAA;AAAF,UAAY,KAAKD,KAAvB;AACA,YAAMY,EAAE,GAAGP,KAAK,CAACE,MAAN,CAAaQ,UAAb,CAAwBA,UAAxB,CAAmCH,EAA9C;AACA,YAAMI,KAAK,GAAGf,KAAK,CAACgB,SAAN,CAAiBC,OAAD,IAAaA,OAAO,CAACN,EAAR,IAAcA,EAA3C,CAAd;AACAX,MAAAA,KAAK,CAACkB,MAAN,CAAaH,KAAb,EAAoB,CAApB;AACA,WAAKV,QAAL,CAAc;AACZL,QAAAA,KAAK,EAAEA;AADK,OAAd;AAGD,KAxC0B;;AAAA,SA0C3BmB,aA1C2B,GA0CX,MAAM,CAAE,CA1CG;;AAAA,SA4C3BX,WA5C2B,GA4CZJ,KAAD,IAAW;AACvB,WAAKC,QAAL,CAAc;AACZL,QAAAA,KAAK,EAAE;AADK,OAAd;AAGD,KAhD0B;AAAA;;AAkD3BoB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEnB,MAAAA,UAAF;AAAcD,MAAAA;AAAd,QAAwB,KAAKD,KAAnC;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,gBAFd;AAGE,YAAA,QAAQ,EAAE,KAAKI,YAHjB;AAIE,YAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWE,UAJpB;AAKE,YAAA,SAAS,EAAC,KALZ;AAME,YAAA,UAAU,EAAGG,KAAD,IAAW;AACrB,kBAAIA,KAAK,CAACiB,GAAN,IAAa,OAAjB,EAA0B;AACxB,qBAAKZ,aAAL;AACD;AACF;AAVH;AAAA;AAAA;AAAA;AAAA,kBADF,eAaE;AAAQ,YAAA,OAAO,EAAE,KAAKA,aAAtB;AAAqC,YAAA,SAAS,EAAC,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAkBE;AAAK,UAAA,SAAS,EAAC,YAAf;AAA4B,UAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC,KAA9C;AAAA,oBACGA,KAAK,CAACsB,GAAN,CAAU,CAACC,IAAD,EAAOR,KAAP,KAAiB;AAC1B,gCAAO,QAAC,KAAD;AAAO,cAAA,IAAI,EAAEQ,IAAb;AAAmB,cAAA,YAAY,EAAE,KAAKV;AAAtC;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,WAFA;AADH;AAAA;AAAA;AAAA;AAAA,gBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAyBE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAuB,QAAA,OAAO,EAAE,KAAKL,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBF,eA4BE,QAAC,KAAD;AACE,QAAA,QAAQ,EAAE,MAAM;AACdgB,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,SAHH;AAIE,QAAA,OAAO,EAAE,MAAM;AACbD,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AANH;AAAA;AAAA;AAAA;AAAA,cA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuCD;;AA3F0B;;AA8F7B,eAAe3B,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Tasks from \"../tasks/Tasks\";\nimport check from \"../../images/check.png\";\nimport Navbar from \"../navbar/Navbar\";\nimport idGenerator from \"react-id-generator\";\nimport Modal from \"../modal/Modal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass ToDo extends Component {\n  state = {\n    tasks: [],\n    inputValue: \"\",\n    toggle: false,\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  };\n\n  handleReset = (event) => {};\n\n  handleAddTask = () => {\n    if (!this.state.inputValue == \"\") {\n      const { inputValue } = this.state;\n      const tasks = [...this.state.tasks];\n      const newTask = {\n        id: idGenerator(\"task\"),\n        value: inputValue,\n      };\n\n      tasks.push(newTask);\n      this.setState({\n        tasks: tasks,\n        inputValue: \"\",\n      });\n    }\n  };\n\n  handleDelete = (event) => {\n    const { tasks } = this.state;\n    const id = event.target.parentNode.parentNode.id;\n    const index = tasks.findIndex((element) => element.id == id);\n    tasks.splice(index, 1);\n    this.setState({\n      tasks: tasks,\n    });\n  };\n\n  toggleConfirm = () => {};\n\n  handleReset = (event) => {\n    this.setState({\n      tasks: [],\n    });\n  };\n\n  render() {\n    const { inputValue, tasks } = this.state;\n    return (\n      <div className=\"main\">\n        <div className=\"container\">\n          <div className=\"inputPart\">\n            <input\n              type=\"text\"\n              placeholder=\"Anything ToDo?\"\n              onChange={this.handleChange}\n              value={this.state.inputValue}\n              className=\"inp\"\n              onKeyPress={(event) => {\n                if (event.key == \"Enter\") {\n                  this.handleAddTask();\n                }\n              }}\n            ></input>\n            <button onClick={this.handleAddTask} className=\"button\">\n              +\n            </button>\n          </div>\n          <div className=\"resultPart\" value={this.state.tasks}>\n            {tasks.map((task, index) => {\n              return <Tasks data={task} handleDelete={this.handleDelete} />;\n            })}\n          </div>\n        </div>\n        <div className=\"reset\" onClick={this.handleReset}>\n          Reset\n        </div>\n        <Modal\n          onSubmit={() => {\n            console.log(\"submit\");\n          }}\n          onClose={() => {\n            console.log(\"close\");\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}